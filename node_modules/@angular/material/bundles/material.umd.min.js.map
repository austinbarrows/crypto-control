{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.3-53b01bc');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n    const colorChanges = changes.color;\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes['svgIcon']) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsDisabledState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsDisabledState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's disabled state with the individual chips. */\n  private _syncChipsDisabledState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': '_hasAriaLabel ? ariaLabel : null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  /**\n   * Whether the button should have an `aria-label`. Used for clearing the\n   * attribute to prevent it from being read instead of the button's text.\n   */\n  _hasAriaLabel?: boolean;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (typeof this._hasAriaLabel === 'undefined') {\n      const element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute('mat-icon-button')) {\n        this._hasAriaLabel = true;\n      } else {\n        const buttonTextContent = element.textContent;\n        this._hasAriaLabel = !buttonTextContent || buttonTextContent.trim().length === 0;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange =\n        changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n\n    if (changes.ariaLabel) {\n      this._hasAriaLabel = !!changes.ariaLabel.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    if (this._ngZone) {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["host","[attr.aria-expanded]","[attr.role]","class","inputs","providers","provide","CdkNestedTreeNode","useExisting","MatNestedTreeNode","CdkTreeNode","type","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","args","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","_super","tslib_1.__extends","Directive","selector","CdkTreeNodePadding","level","indent","MatTree","Component","exportAs","template","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","_this","apply","this","arguments","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNodeDef","MatTreeNode","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","prototype","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabBody","ngOnInit","_position","origin","_computePositionFromOrigin","ngOnDestroy","_dirChangeSubscription","unsubscribe","_translateTabComplete","complete","_onTranslateTabStarted","event","isCentering","_isCenterPosition","toState","_beforeCentering","emit","_onCentering","_elementRef","nativeElement","clientHeight","_getLayoutDirection","_dir","position","_computePositionAnimationState","dir","_positionIndex","animations","matTabsAnimations","translateTab","ChangeDetectorRef","_afterLeavingCenter","Output","_onCentered","_portalHost","ViewChild","PortalHostDirective","_content","animationDuration","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","_tree","Number","[attr.aria-level]","CdkTreeNodeDef","_differs","MatStepHeader","errorMessage","iconOverrides","selected","optional","disableRipple","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","distinctUntilChanged","x","y","fromState","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","changeDetectorRef","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_getDefaultTextForState","_left","_end","_right","_start","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","drawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","hideDelay","_defaultOptions","_message","_manualListeners","_scrollStrategy","scrollStrategy","elementStyle","hasGestures","window","Hammer","hammerLoader","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","MatTooltip","_updatePosition","_tooltipInstance","updatePosition","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","onMenuClose","menuClosed","_handleTouchStart","_menuItemInstance","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","restoreFocus","menuOpened","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","MatListOption","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","_color","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","_hasAriaLabel","buttonTextContent","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_syncChipsDisabledState","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_connectionContainerRef","_inputContainerRef","_placeholderChild","MatPlaceholder","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}